<!DOCTYPE html>
<html lang="zh-CN">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>幻想乡 — 百叶窗</title>
<style>
  :root{ --corner-w:110px; --blind-gap:8px; }
  *{box-sizing:border-box}
  html,body{height:100%;margin:0;font-family:"Microsoft YaHei","PingFang SC",Arial,sans-serif;background:#0b0710;color:#fff}

/* 遮罩层（进入） */
#overlay{
  position:fixed;left:0;top:0;width:100%;height:100%;
  background:rgba(0,0,0,0.95);display:flex;align-items:center;justify-content:center;z-index:9999;
}
.overlay-content{text-align:center}
.overlay-content h1{color:#ffb6d9;font-size:38px;margin:0 0 16px;text-shadow:0 0 10px #ff69b4}
#enterBtn{
  padding:10px 22px;border-radius:8px;border:none;background:linear-gradient(90deg,#ff9fc7,#ff6fb4);
  color:#fff;font-size:18px;cursor:pointer;box-shadow:0 8px 30px rgba(255,105,180,0.12);
}

/* 主布局：五片百叶窗（横向切分5列）*/
.container{display:flex;height:100vh;align-items:stretch;position:relative;overflow:hidden}
.blind{
  flex:1;
  min-width:0; /* 避免内容撑起 */
  background-size:cover;
  background-position:center;
  transition: all 500ms cubic-bezier(.2,.9,.3,1);
  cursor:pointer;
  filter:brightness(.82);
  border-left: var(--blind-gap) solid rgba(255,255,255,0.02);
}
.blind:first-child{border-left:none}
/* hover 展开效果（像横向百叶窗） */
.blind:hover{flex:2.6; filter:brightness(1)}

/* 右下角角落图（保持不动） */
.corner{position:absolute;right:14px;bottom:14px;width:var(--corner-w);z-index:50}
.corner img{width:100%;height:auto;border-radius:8px;box-shadow:0 6px 18px rgba(0,0,0,.6)}

/* 左下角文字按钮（切歌） */
.music-control{
  position:fixed;left:14px;bottom:14px;padding:8px 12px;background:rgba(0,0,0,0.55);
  color:#ffb6c1;font-size:16px;border-radius:8px;cursor:pointer;user-select:none;z-index:60;
  transition:transform .12s, box-shadow .18s;
}
.music-control:hover{ transform:translateY(-2px); background: rgba(255,20,147,0.08) }
.music-control.playing{ box-shadow: 0 8px 30px rgba(255,182,193,0.14) }
.music-control.flash{ animation:flash 650ms ease }
@keyframes flash{ 0%{box-shadow:0 0 0 rgba(255,182,193,0)} 50%{box-shadow:0 0 26px rgba(255,182,193,.6)} 100%{box-shadow:0 0 0 rgba(255,182,193,0)} }

/* 樱花样式（背景小花） */
.sakura{
  position:fixed;top:-12vh;pointer-events:none;border-radius:50%;
  background: radial-gradient(circle at 30% 30%, #ffe9f0 0 30%, #ffb7d0 31% 70%);
  will-change:transform,opacity; opacity:.9; z-index:40;
  animation: fall linear forwards, sway ease-in-out infinite;
}
@keyframes fall{
  0%{ transform: translateY(0) rotate(0deg); }
  100%{ transform: translateY(110vh) rotate(360deg); opacity:0; }
}
@keyframes sway{
  0%{ transform: translateX(0); }
  25%{ transform: translateX(8px); }
  50%{ transform: translateX(-8px); }
  75%{ transform: translateX(6px); }
  100%{ transform: translateX(0); }
}

/* 点击生成的特殊樱花（更亮更大） */
.sakura-click{
  position:fixed; pointer-events:none; border-radius:50%;
  background: radial-gradient(circle at 30% 30%, #fff0f6 0 30%, #ffc1de 31% 70%);
  box-shadow:0 0 8px rgba(255,182,193,0.9); z-index:45;
  animation: clickFall linear forwards, sway ease-in-out infinite;
}
@keyframes clickFall{
  0%{ transform: translateY(0) rotate(0deg) }
  100%{ transform: translateY(110vh) rotate(720deg); opacity:0 }
}

/* 隐藏默认音频控件（我们用脚本控制） */
audio{ display:none }

/* 响应式 */
@media (max-width:800px){
  .music-control{ left:10px; bottom:10px; font-size:14px; padding:6px 10px }
  .corner{ right:10px; bottom:10px; width:84px }
  .overlay-content h1{ font-size:28px }
}
</style>
</head>
<body>
  <!-- 遮罩层（必须点击进入以解锁声音） -->
  <div id="overlay" role="dialog" aria-modal="true">
    <div class="overlay-content">
      <h1>欢迎来到幻想乡</h1>
      <button id="enterBtn">进入</button>
    </div>
  </div>

  <!-- 五片百叶窗（横向分成 5 列） -->
  <div class="container" id="container">
    <div class="blind" id="b0" data-bg="image/bg1.jpg"></div>
    <div class="blind" id="b1" data-bg="image/bg2.jpg"></div>
    <div class="blind" id="b2" data-bg="image/bg3.jpg"></div>
    <div class="blind" id="b3" data-bg="image/bg4.jpg"></div>
    <div class="blind" id="b4" data-bg="image/bg5.jpg"></div>

    <!-- 右下角角落图（保留） -->
    <div class="corner"><img src="image/corner.jpg" alt="corner"></div>

    <!-- 左下角文字切歌 -->
    <div class="music-control" id="musicControl" role="button" aria-pressed="false">少女祈祷中</div>
  </div>

  <!-- 背景音频（由脚本控制） -->
  <audio id="bgm" preload="auto"></audio>

<script>
/* 
  单文件运行说明：
  - 保存为 index.html
  - 请在同级目录准备：
      image/bg1.jpg ... image/bg5.jpg
      image/corner.jpg
      music/bgm1.mp3 ... music/bgmN.mp3
  - 用 Live Server（或 http 服务器）打开效果更稳定
*/

document.addEventListener('DOMContentLoaded', () => {
  // ===== 配置（按需修改） =====
  const bgImgList = [
    'image/bg1.jpg',
    'image/bg2.jpg',
    'image/bg3.jpg',
    'image/bg4.jpg',
    'image/bg5.jpg'
  ];
  const musicList = [
    'music/bgm1.mp3',
    'music/bgm2.mp3',
    'music/bgm3.mp3'
  ];
  // ===========================

  const overlay = document.getElementById('overlay');
  const enterBtn = document.getElementById('enterBtn');
  const bgm = document.getElementById('bgm');
  const musicControl = document.getElementById('musicControl');
  const blinds = document.querySelectorAll('.blind');

  let currentIndex = -1;
  let sakuraTimer = null;

  // 将 data-bg 同步到每个 blind 的 background
  blinds.forEach((el,i) => {
    const path = el.getAttribute('data-bg') || bgImgList[i] || '';
    if (path) el.style.backgroundImage = `url('${path}')`;
  });

  // 资源预检：若文件不存在，会在 console 警告（便于调试）
  function checkResources(){
    bgImgList.forEach(p => {
      const img = new Image();
      img.onload = ()=>{};
      img.onerror = ()=> console.warn('背景图未找到: ', p);
      img.src = p;
    });
    musicList.forEach(m => {
      const a = document.createElement('audio');
      a.onerror = ()=> console.warn('音乐文件未找到或格式不支持: ', m);
      a.src = m;
    });
    const c = new Image(); c.onerror = ()=> console.warn('角落图未找到: image/corner.jpg'); c.src = 'image/corner.jpg';
  }
  checkResources();

  // 随机选择下一个音乐索引（避免重复）
  function chooseNextIndex(){
    if (!musicList || musicList.length === 0) return -1;
    if (musicList.length === 1) return 0;
    let idx;
    do { idx = Math.floor(Math.random()*musicList.length); } while (idx === currentIndex);
    return idx;
  }

  function updateMusicUI(isPlaying){
    musicControl.classList.toggle('playing', !!isPlaying);
    musicControl.setAttribute('aria-pressed', !!isPlaying);
  }

  // 播放函数
  function playAtIndex(idx){
    if (idx < 0 || idx >= musicList.length) return;
    currentIndex = idx;
    const url = musicList[currentIndex];
    if (!url) return;
    if (bgm.src.indexOf(url) === -1) bgm.src = url;
    bgm.currentTime = 0;
    bgm.loop = false; // 用 ended 事件轮播
    bgm.play().then(()=> {
      updateMusicUI(true);
    }).catch(err => {
      console.warn('播放被阻止或失败: ', err);
      updateMusicUI(false);
    });
  }

  function playRandomMusic(){
    const next = chooseNextIndex();
    if (next === -1) return;
    // 视觉 flash
    musicControl.classList.add('flash');
    setTimeout(()=> musicControl.classList.remove('flash'), 650);
    playAtIndex(next);
  }

  // enter 按钮：隐藏遮罩并开始播放（用户交互解锁）
  enterBtn.addEventListener('click', () => {
    overlay.style.transition = 'opacity 400ms ease';
    overlay.style.opacity = '0';
    overlay.addEventListener('transitionend', function once(){ overlay.style.display='none'; overlay.removeEventListener('transitionend', once); });

    // 取消静音并播放
    bgm.muted = false;
    playRandomMusic();

    // 启动樱花
    startSakura();
  });

  // 点击左下切歌
  musicControl.addEventListener('click', () => {
    // 若尚未播放则先播放
    if (currentIndex === -1 || bgm.paused) {
      bgm.muted = false;
      playRandomMusic();
      return;
    }
    playRandomMusic();
  });

  // 曲终自动换下一首
  bgm.addEventListener('ended', () => {
    playRandomMusic();
  });

  // 首次任何交互也可解锁播放（保险）
  function onFirstInteraction(){
    if (bgm && bgm.paused && currentIndex === -1){
      bgm.muted = false;
      playRandomMusic();
    } else if (bgm && !bgm.paused && bgm.muted){
      bgm.muted = false;
      updateMusicUI(true);
    }
    document.removeEventListener('pointerdown', onFirstInteraction);
  }
  document.addEventListener('pointerdown', onFirstInteraction, { once:true });

  // 作为回退：尝试静音 autoplay（多数浏览器允许 muted autoplay）
  (function tryMutedAutoplay(){
    if (!musicList || musicList.length===0) return;
    try{
      bgm.muted = true;
      bgm.src = musicList[Math.floor(Math.random()*musicList.length)];
      bgm.play().then(()=> console.log('静音 autoplay 成功')).catch(()=> console.log('静音 autoplay 被阻止或失败'));
    }catch(e){}
  })();

  // ================= 樱花效果 =================
  function createSakura(){
    const s = document.createElement('div');
    s.className = 'sakura';
    // 左右随机位置
    s.style.left = (Math.random()*100) + 'vw';
    // 大小随机 8~16
    const size = (Math.random()*8) + 8;
    s.style.width = size + 'px';
    s.style.height = Math.round(size*0.9) + 'px';
    // 下落时长 5~8s，摇摆时长 3~6s
    const fallDur = (5 + Math.random()*3).toFixed(2) + 's';
    const swayDur = (3 + Math.random()*3).toFixed(2) + 's';
    s.style.animationDuration = `${fallDur}, ${swayDur}`;
    s.style.opacity = (0.4 + Math.random()*0.6).toString();
    document.body.appendChild(s);
    setTimeout(()=> { try{ s.remove(); } catch(e){} }, (parseFloat(fallDur)*1000) + 800);
  }

  function startSakura(){
    if (sakuraTimer) return;
    sakuraTimer = setInterval(createSakura, 300);
  }

  // 点击屏幕在点击点生成特殊樱花（带发光）
  document.addEventListener('click', (e) => {
    // 如果点击的是切歌或进入按钮，跳过（避免重复）
    if (e.target.closest('#enterBtn') || e.target.closest('#musicControl')) return;

    const sc = document.createElement('div');
    sc.className = 'sakura-click';
    sc.style.left = (e.clientX - 8) + 'px'; // 居中一点
    sc.style.top = (e.clientY - 8) + 'px';
    const size = (Math.random()*10) + 10; // 10 ~ 20
    sc.style.width = size + 'px';
    sc.style.height = Math.round(size*0.9) + 'px';
    const fallDur = (5 + Math.random()*3).toFixed(2) + 's';
    const swayDur = (3 + Math.random()*2).toFixed(2) + 's';
    sc.style.animationDuration = `${fallDur}, ${swayDur}`;
    document.body.appendChild(sc);
    setTimeout(()=> { try{ sc.remove(); } catch(e){} }, (parseFloat(fallDur)*1000) + 900);
  });

  // 页面卸载清理
  window.addEventListener('beforeunload', ()=> { if (sakuraTimer) clearInterval(sakuraTimer); });

  // 控制台提示
  console.log('提示：若无声或资源未加载，请用 Live Server 或 http 服务器 打开，并在控制台查看 Failed to load resource 报错。');

}); // DOMContentLoaded end
</script>
</body>
</html>
